#!/bin/bash

grub_file="/etc/default/grub"

# Function to display help options
show_help() {
    echo "Usage: $0 FUNCTION [ARGUMENTS]"
    echo ""
    echo "Available functions and their arguments:"
    echo "-----------------------------------------"
    echo "1) modify_grub_option [add|remove] OPTION_NAME OPTION_VALUE"
    echo "   - Modify a general GRUB option."
    echo "2) comment_grub_option OPTION_NAME"
    echo "   - Comment out a specific GRUB option."
    echo "3) uncomment_grub_option OPTION_NAME"
    echo "   - Uncomment a specific GRUB option."
    echo "4) modify_linux_default [add|remove] OPTION"
    echo "   - Add or remove options from the GRUB_CMDLINE_LINUX_DEFAULT line."
    echo ""
    echo "Examples:"
    echo "-----------------------------------------"
    echo "$0 modify_grub_option add GRUB_TIMEOUT 10"
    echo "$0 comment_grub_option GRUB_TIMEOUT"
    echo "$0 uncomment_grub_option GRUB_TIMEOUT"
    echo "$0 modify_linux_default add \"quiet\""
    echo "-----------------------------------------"
    echo "Note: After making changes, remember to run 'update-grub' or its equivalent."
}

# Function to add or remove options
modify_grub_option() {
    local action="$1"
    local option_name="$2"
    local option_value="$3"
    
    # Check if the grub file exists
    if [[ ! -f $grub_file ]]; then
        echo "File $grub_file not found!"
        return 1
    fi

    case "$action" in
        add)
            # Check if the option already exists
            if grep -q "^$option_name=" "$grub_file"; then
                # Update the value of the existing option
                sed -i "s/^$option_name=.*/$option_name=$option_value/" "$grub_file"
            else
                # Add the new option to the end of the file
                echo "$option_name=$option_value" >> "$grub_file"
            fi
            ;;
        remove)
            # Remove the option from the file
            sed -i "/^$option_name=/d" "$grub_file"
            ;;
        *)
            echo "Unknown action. Use 'add' or 'remove'."
            return 1
            ;;
    esac
}

# Function to comment options
comment_grub_option() {
    local option_name="$1"
    
    # Check if the option is not commented and then comment it
    sed -i "s/^\($option_name=.*\)/#\1/" "$grub_file"
}

# Function to uncomment options
uncomment_grub_option() {
    local option_name="$1"
    
    # Check if the option is commented and then uncomment it
    sed -i "s/^#\($option_name=.*\)/\1/" "$grub_file"
}

# Specific function to add or remove options from the GRUB_CMDLINE_LINUX_DEFAULT line
modify_linux_default() {
    local action="$1"
    local option="$2"

    # Get the current value of the GRUB_CMDLINE_LINUX_DEFAULT line
    local current_value=$(grep "^GRUB_CMDLINE_LINUX_DEFAULT=" "$grub_file" | cut -d'=' -f2 | sed 's/"//g')

    case "$action" in
        add)
            # Add the option only if it doesn't already exist
            if ! echo "$current_value" | grep -qE "(^| )$option( |$)"; then
                current_value="$current_value $option"
            fi
            ;;
        remove)
            # Remove the option if it exists
            current_value=$(echo "$current_value" | sed -E "s/(^| )$option( |$)/ /")
            ;;
        *)
            echo "Unknown action. Use 'add' or 'remove'."
            return 1
            ;;
    esac

    # Trim leading and trailing spaces
    current_value=$(echo "$current_value" | sed -E 's/^ *| *$//g')

    # Update the value in the grub file
    modify_grub_option add GRUB_CMDLINE_LINUX_DEFAULT "\"$current_value\""
}

# If the script is called without arguments, show the help
if [ "$#" -eq 0 ]; then
    show_help
    exit 0
fi

case "$1" in
    modify_grub_option)
        modify_grub_option "$2" "$3" "$4"
        ;;
    comment_grub_option)
        comment_grub_option "$2"
        ;;
    uncomment_grub_option)
        uncomment_grub_option "$2"
        ;;
    modify_linux_default)
        modify_linux_default "$2" "$3"
        ;;
    help)
        show_help
        ;;
    *)
        echo "Unknown function: $1"
        echo "Run $0 help for usage."
        exit 1
        ;;
esac

