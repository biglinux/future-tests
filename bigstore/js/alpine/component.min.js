(() => {
    function m(o, e) {
        if (!e.length) return;
        let l = new CSSStyleSheet(),
            n = [...document.styleSheets];
        e.length && (n = e.includes("global") ? n : n.filter(({ title: s }) => e.includes(s)));
        let i = n.flatMap(({ cssRules: t }) => [...t]);
        for (let t of i) (t instanceof CSSStyleRule && t.selectorText === ":root") || l.insertRule(t.cssText);
        o.adoptedStyleSheets = [l];
    }
    async function loadDataIfNeeded(element) {
        if (element.hasAttribute('x-data')) {
            let xDataAttr = element.getAttribute('x-data');
            if (xDataAttr.startsWith('loadJson')) {
                let jsonUrl = xDataAttr.match(/"([^"]+)"/)[1];
                try {
                    let jsonData = await window.loadJson(jsonUrl);
                    return jsonData;
                } catch (error) {
                    console.error('Erro ao carregar JSON:', error);
                }
            }
        }
        return null;
    }
    
    async function loadTemplate(url) {
        try {
            let response = await fetch(url);
            return await response.text();
        } catch (error) {
            console.error('Erro ao carregar o template:', error);
        }
    }

    async function p(o, e, l, element) {
        let jsonData = await loadDataIfNeeded(element);
    
        let content = await (async function (t) {
            let s = document.getElementById(t);
            if (!s) {
                let url = `components/${t}.html`;
                return (await (await fetch(url)).text());
            } else {
                return s.innerHTML;
            }
        })(e);
    
        let t = new DOMParser().parseFromString(content, "text/html").body.firstChild;
        l.appendChild(t);
    
        if (jsonData) {
            // Aqui, em vez de passar os dados diretamente para initTree,
            // vamos tentar aplicar os dados ao componente de outra maneira.
            for (let key in jsonData) {
                element[key] = jsonData[key];
            }
        }
    
        // Chama initTree sem passar os dados diretamente
        o.initTree(l);
    }
    async function u(o, e, l) {
        let i = await (await fetch(e)).text(),
            t = new DOMParser().parseFromString(i, "text/html").body.firstChild;
        l.appendChild(t), o.initTree(l);
    }
    function d(Alpine) {
        class e extends HTMLElement {
            constructor() {
                super();
                this.jsonDataLoaded = false;
            }
    
            async connectedCallback() {
                let n = this.attachShadow({ mode: "open" });
                let { template: s = { value: "" }, styles: h = { value: "" } } = this.attributes;
                let [templateName] = s.value.split(":");
    
                // Carregar JSON apenas uma vez
                if (!this.jsonDataLoaded && this.hasAttribute('x-data')) {
                    let xDataAttr = this.getAttribute('x-data');
                    if (xDataAttr.startsWith('loadJson')) {
                        let jsonUrl = xDataAttr.match(/"([^"]+)"/)[1];
                        try {
                            this.jsonData = await window.loadJson(jsonUrl);
                            this.jsonDataLoaded = true;
                        } catch (error) {
                            console.error('Erro ao carregar JSON:', error);
                        }
                    }
                }
    
                // Incluir o template no componente
                if (templateName) {
                    let contentUrl = `components/${templateName}.html`;
                    let content = await fetch(contentUrl).then(response => response.text());
                    let t = new DOMParser().parseFromString(content, "text/html").body.firstChild;
                    n.appendChild(t);
                }
    
                let y = h.value.split(",");
                m(n, y);
    
                // Aplicar os dados JSON ao estado do Alpine.js
                if (this.jsonDataLoaded) {
                    this.setAttribute('x-data', JSON.stringify(this.jsonData));
                    Alpine.initTree(n); // Inicializa o Alpine.js no elemento
                }
            }
        }
        window.customElements.get("component") || (customElements.define("component", e), new e());
    }
    document.addEventListener("alpine:init", () => d(window.Alpine));
})();